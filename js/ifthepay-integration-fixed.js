/**
 * Integração com a API da IfthenPay para pagamentos - VERSÃO CORRIGIDA
 * Endpoints e parâmetros corretos conforme documentação oficial
 */

// Chaves da IfthenPay para os diferentes métodos de pagamento
const IFTHENPAY_KEYS = {
    multibanco: "BXG-350883",
    mbway: "UWP-547025", 
    payshop: "QTU-066969"
};

// CORRIGIDO: Endpoints oficiais conforme documentação IfthenPay
const IFTHENPAY_ENDPOINTS = {
    multibanco: "https://api.ifthenpay.com/multibanco/init",
    mbway: "https://api.ifthenpay.com/spg/payment/mbway",
    payshop: "https://ifthenpay.com/api/payshop/get"
};

// Backend próprio como fallback
const PAYMENT_API_ENDPOINT = "https://share2inspire-beckend.lm.r.appspot.com/api/payment/initiate";

/**
 * Função CORS para headers adequados
 */
function getCorsHeaders( ) {
    return {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization, Accept'
    };
}

/**
 * Processa um pagamento através da API da IfthenPay - VERSÃO CORRIGIDA
 */
async function processPayment(formData, paymentMethod, amount) {
    try {
        const normalizedMethod = getPaymentMethodFormat(paymentMethod);
        console.log(`Processando pagamento ${normalizedMethod} no valor de ${amount}€`);
        
        // CORRIGIDO: Tentar API oficial primeiro, fallback depois
        try {
            return await processPaymentDirect(formData, normalizedMethod, amount);
        } catch (directError) {
            console.warn('API direta falhou, usando fallback:', directError.message);
            return await processPaymentFallback(formData, normalizedMethod, amount);
        }
        
    } catch (error) {
        console.error("Erro ao processar pagamento:", error);
        throw error;
    }
}

/**
 * CORRIGIDO: Processar pagamento via APIs oficiais IfthenPay
 */
async function processPaymentDirect(formData, paymentMethod, amount) {
    const endpoint = IFTHENPAY_ENDPOINTS[paymentMethod];
    const key = IFTHENPAY_KEYS[paymentMethod];
    
    if (!endpoint || !key) {
        throw new Error(`Método de pagamento não suportado: ${paymentMethod}`);
    }
    
    let payload;
    let requestOptions;
    
    if (paymentMethod === 'mbway') {
        // CORRIGIDO: Formato correto para MB WAY conforme documentação
        payload = {
            mbWayKey: key, // CORRIGIDO: mbWayKey não mbwayKey
            orderId: `ORDER-${Date.now()}`,
            amount: amount.toFixed(2),
            mobileNumber: formatPhoneForMBWay(formData.phone),
            email: formData.email || '',
            description: `${formData.service || 'Serviço Share2Inspire'} - ${formData.name}`
        };
        
        requestOptions = {
            method: 'POST',
            headers: getCorsHeaders(),
            body: JSON.stringify(payload)
        };
        
    } else if (paymentMethod === 'multibanco') {
        // CORRIGIDO: Formato correto para Multibanco conforme documentação
        payload = {
            mbKey: key,
            orderId: `ORDER-${Date.now()}`,
            amount: amount.toFixed(2),
            description: `${formData.service || 'Serviço Share2Inspire'} - ${formData.name}`,
            clientEmail: formData.email || '',
            clientName: formData.name || '',
            clientPhone: formData.phone || ''
        };
        
        requestOptions = {
            method: 'POST',
            headers: getCorsHeaders(),
            body: JSON.stringify(payload)
        };
        
    } else if (paymentMethod === 'payshop') {
        // CORRIGIDO: Payshop usa GET request conforme documentação
        const params = new URLSearchParams({
            payshopkey: key,
            id: `ORDER-${Date.now()}`,
            valor: amount.toFixed(2)
        });
        
        requestOptions = {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        };
        
        // Para Payshop, adicionar parâmetros à URL
        const fullEndpoint = `${endpoint}?${params.toString()}`;
        console.log(`Chamando API Payshop: ${fullEndpoint}`);
        
        const response = await fetch(fullEndpoint, requestOptions);
        
        if (!response.ok) {
            throw new Error(`API Payshop falhou: ${response.status}`);
        }
        
        const responseData = await response.json();
        console.log('Resposta API Payshop:', responseData);
        
        return {
            success: true,
            method: paymentMethod,
            reference: responseData.Reference,
            amount: amount.toFixed(2),
            request_id: responseData.RequestId,
            code: responseData.Code,
            message: responseData.Message
        };
    }
    
    // Para Multibanco e MB WAY
    console.log(`Chamando API ${paymentMethod}:`, endpoint);
    console.log('Payload:', payload);
    
    const response = await fetch(endpoint, requestOptions);
    
    if (!response.ok) {
        throw new Error(`API ${paymentMethod} falhou: ${response.status}`);
    }
    
    const responseData = await response.json();
    console.log(`Resposta API ${paymentMethod}:`, responseData);
    
    // Processar resposta baseada no método
    if (paymentMethod === 'mbway') {
        return {
            success: true,
            method: paymentMethod,
            amount: responseData.Amount,
            order_id: responseData.OrderId,
            request_id: responseData.RequestId,
            status: responseData.Status,
            message: responseData.Message,
            phone: formatPhoneForMBWay(formData.phone)
        };
    } else if (paymentMethod === 'multibanco') {
        return {
            success: true,
            method: paymentMethod,
            entity: responseData.Entity,
            reference: responseData.Reference,
            amount: responseData.Amount,
            order_id: responseData.OrderId,
            expiry_date: responseData.ExpiryDate,
            request_id: responseData.RequestId
        };
    }
}

/**
 * CORRIGIDO: Fallback para backend próprio
 */
async function processPaymentFallback(formData, paymentMethod, amount) {
    const paymentData = {
        service: formData.service || 'Serviço Share2Inspire',
        name: formData.name,
        email: formData.email,
        phone: paymentMethod === 'mbway' ? formatPhoneForMBWay(formData.phone) : formData.phone,
        date: formData.date || '',
        amount: amount,
        payment_method: paymentMethod,
        order_id: `ORDER-${Date.now()}`,
        appointment_date: formData.date,
        appointment_time: formData.time,
        description: formData.service || 'Serviço Share2Inspire'
    };

    console.log("Usando fallback backend:", paymentData);

    const response = await fetch(PAYMENT_API_ENDPOINT, {
        method: 'POST',
        headers: getCorsHeaders(),
        body: JSON.stringify(paymentData)
    });

    if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Backend falhou: ${response.status} - ${errorText}`);
    }

    const responseData = await response.json();
    
    if (!responseData.success) {
        throw new Error(responseData.error || 'Erro desconhecido no backend');
    }

    return responseData;
}

/**
 * Converte o método de pagamento para o formato esperado
 */
function getPaymentMethodFormat(method) {
    if (!method) return 'multibanco';
    
    method = method.toLowerCase();
    
    const methodMap = {
        'mb': 'multibanco',
        'multibanco': 'multibanco', 
        'mbway': 'mbway',
        'mb way': 'mbway',
        'payshop': 'payshop'
    };
    
    return methodMap[method] || 'multibanco';
}

/**
 * CORRIGIDO: Formata telefone conforme documentação MB WAY (351912345678)
 */
function formatPhoneForMBWay(phone) {
    if (!phone) return '';
    
    // Remover todos os caracteres não numéricos
    let cleanPhone = phone.replace(/\D/g, '');
    
    // Se já começa com 351, usar como está
    if (cleanPhone.startsWith('351') && cleanPhone.length >= 12) {
        return cleanPhone;
    }
    
    // Se começa com 9 e tem 9 dígitos (formato português), adicionar 351
    if (cleanPhone.startsWith('9') && cleanPhone.length === 9) {
        cleanPhone = '351' + cleanPhone;
    }
    
    return cleanPhone;
}

/**
 * CORRIGIDO: Exibe as informações de pagamento
 */
function displayPaymentInfo(paymentData, paymentMethod, container) {
    container.innerHTML = '';
    
    if (!paymentData || !paymentData.success) {
        displayPaymentError(new Error("Pagamento não processado corretamente"), container);
        return;
    }
    
    const normalizedMethod = getPaymentMethodFormat(paymentMethod);
    const paymentInfo = document.createElement('div');
    paymentInfo.className = 'alert alert-success';
    
    if (normalizedMethod === 'multibanco') {
        paymentInfo.innerHTML = `
            <h4><i class="fas fa-credit-card"></i> Pagamento Multibanco</h4>
            <div class="payment-details">
                <p><strong>Entidade:</strong> <span class="highlight">${paymentData.entity || ''}</span></p>
                <p><strong>Referência:</strong> <span class="highlight">${paymentData.reference || ''}</span></p>
                <p><strong>Valor:</strong> <span class="highlight">${paymentData.amount || ''}€</span></p>
                ${paymentData.expiry_date ? `<p><strong>Válido até:</strong> ${paymentData.expiry_date}</p>` : ''}
            </div>
            <p class="instructions">Por favor, efetue o pagamento em qualquer caixa multibanco ou homebanking.</p>
        `;
    } else if (normalizedMethod === 'mbway') {
        paymentInfo.innerHTML = `
            <h4><i class="fas fa-mobile-alt"></i> Pagamento MB WAY</h4>
            <div class="payment-details">
                <p><strong>Número:</strong> <span class="highlight">${paymentData.phone || paymentData.mobileNumber || ''}</span></p>
                <p><strong>Valor:</strong> <span class="highlight">${paymentData.amount || ''}€</span></p>
                <p><strong>Estado:</strong> <span class="status-pending">${paymentData.message || 'Pendente'}</span></p>
            </div>
            <p class="instructions">Foi enviado um pedido de pagamento para o seu número MB WAY. Por favor, aceite o pagamento na aplicação MB WAY.</p>
        `;
    } else if (normalizedMethod === 'payshop') {
        paymentInfo.innerHTML = `
            <h4><i class="fas fa-store"></i> Pagamento Payshop</h4>
            <div class="payment-details">
                <p><strong>Referência:</strong> <span class="highlight">${paymentData.reference || ''}</span></p>
                <p><strong>Valor:</strong> <span class="highlight">${paymentData.amount || ''}€</span></p>
            </div>
            <p class="instructions">Por favor, efetue o pagamento em qualquer agente Payshop ou CTT.</p>
        `;
    }
    
    container.appendChild(paymentInfo);
    
    // Adicionar estilos se não existirem
    if (!document.getElementById('payment-styles')) {
        const styles = document.createElement('style');
        styles.id = 'payment-styles';
        styles.textContent = `
            .payment-details {
                background-color: #f8f9fa;
                padding: 15px;
                border-radius: 5px;
                margin: 10px 0;
            }
            .highlight {
                font-weight: bold;
                color: #BF9A33;
            }
            .status-pending {
                color: #ffc107;
                font-weight: bold;
            }
            .instructions {
                margin-top: 15px;
                font-style: italic;
                color: #6c757d;
            }
        `;
        document.head.appendChild(styles);
    }
}

/**
 * Exibe mensagem de erro
 */
function displayPaymentError(error, container) {
    container.innerHTML = '';
    
    const errorInfo = document.createElement('div');
    errorInfo.className = 'alert alert-danger';
    errorInfo.innerHTML = `
        <h4><i class="fas fa-exclamation-triangle"></i> Erro ao Processar Pedido</h4>
        <p><strong>Erro:</strong> ${error.message}</p>
        <p>Por favor tente novamente ou contacte-nos diretamente:</p>
        <p><strong>Email:</strong> srshare2inspire@gmail.com</p>
        <p><strong>Telefone:</strong> +351 961 925 050</p>
    `;
    
    container.appendChild(errorInfo);
}

/**
 * Função para verificar status de pagamento MB WAY
 */
async function checkMBWayStatus(requestId) {
    try {
        const response = await fetch(`https://api.ifthenpay.com/spg/payment/mbway/status?requestId=${requestId}`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        } );
        
        if (!response.ok) {
            throw new Error(`Erro ao verificar status: ${response.status}`);
        }
        
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Erro ao verificar status MB WAY:', error);
        throw error;
    }
}

// Exportar funções para uso global
window.IfthenPayIntegration = {
    processPayment,
    processPaymentDirect,
    processPaymentFallback,
    displayPaymentInfo,
    displayPaymentError,
    checkMBWayStatus,
    formatPhoneForMBWay,
    getPaymentMethodFormat,
    IFTHENPAY_KEYS,
    IFTHENPAY_ENDPOINTS
};

console.log('IfthenPay Integration carregada - Versão Corrigida');
